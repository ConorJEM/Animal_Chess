package animalchess;

import java.util.ArrayList;

/**
 * Class that implements the specific movement rules for the chick piece.
 */
public class Chick extends PromotablePiece {
    /**
     * Extends the constructor from the Piece class.
     * @param owner Player who owns this piece.
     * @param square Square this piece sits on.
     */
    public Chick(Player owner, Square square) {
        super(owner, square);
    }

    /**
     * Extends getLegalMoves from the piece class. Implements the rules for the chick piece.
     * @return moves, an array of Square objects containing all allowed moves
     */
    @Override
    public ArrayList<Square> getLegalMoves() {
        Game game = this.getSquare().getGame();
        //legalMoves is the array generated by the overridden getLegalMoves method in the piece class.
        //legal moves contains every adjacent square that doesn't have any friendly pieces.
        ArrayList<Square> legalMoves = super.getLegalMoves();
        //moves is a new array of squares of which I will add squares to according to this specific pieces rules.
        ArrayList<Square> moves = new ArrayList<Square>();

        int r = this.getSquare().getRow();
        int c = this.getSquare().getCol();

        //the direction variable tracks where a piece is 'facing' to avoid repeated code

        int num = this.getOwner().getPlayerNumber();
        int direction;
        if (num == 0) {
            direction = 1;
        } else {
            direction = -1;
        }
        if (this.getIsPromoted() == false) {
            //For each rule, check if the square satisfying this rule is in the legalMoves array.
            //If so, I add it to the moves array.
            //up
            if (legalMoves.contains(game.getSquare(r + direction, c))) {
                moves.add(game.getSquare(r + direction, c));
            }
        } else {
            //up
            if (legalMoves.contains(game.getSquare(r + direction, c))) {
                moves.add(game.getSquare(r + direction, c));
            }
            //up and right
            if (legalMoves.contains(game.getSquare(r + direction, c + 1))) {
                moves.add(game.getSquare(r + direction, c + 1));
            }
            //up and left
            if (legalMoves.contains(game.getSquare(r + direction, c - 1))) {
                moves.add(game.getSquare(r + direction, c - 1));
            }
            //right
            if (legalMoves.contains(game.getSquare(r, c + 1))) {
                moves.add(game.getSquare(r, c + 1));
            }
            //left
            if (legalMoves.contains(game.getSquare(r, c - 1))) {
                moves.add(game.getSquare(r, c - 1));
            }
            //down
            if (legalMoves.contains(game.getSquare(r - direction, c))) {
                moves.add(game.getSquare(r - direction, c));
            }
        }

        return moves;

    }
}
